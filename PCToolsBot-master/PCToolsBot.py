import telebot
import os
import webbrowser
import requests
import platform
import ctypes
import mouse
import PIL.ImageGrab
import cv2
import json
import tkinter as tk
import pyautogui
import pyperclip
from PIL import Image, ImageGrab, ImageDraw
from pySmartDL import SmartDL
from telebot import types
from telebot import apihelper
from psutil import process_iter


######–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–∫—Å–∏
#apihelper.proxy = {'https':'socks5://userproxy:password@proxy_address:port'}
#apihelper.proxy = {'http':'mtproto://password@proxy:port'}
#apihelper.proxy = {'https': 'socks5://proxy:port'}
#apihelper.proxy = {'https': 'http://proxy:port'}


#–ò—Å—Ö–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ–¥–∞
'''
my_id = 123456789
bot_token = '1234567:ASDFGHJKLQWERTY'
bot = telebot.TeleBot(bot_token)

class User:
	def __init__(self):
		keys = ['urldown', 'fin', 'curs']

		for key in keys:
			self.key = None

User.curs = 50
'''


#2 –í–∞—Ä–∏–∞–Ω—Ç
cfg_file = "config.json"
my_id = None
bot_token = None

def id_user_tg():
	global my_id, bot_token
	webbrowser.open('https://web.telegram.org/k/#@getmyid_bot')
	window = tk.Tk()
	window.title('PC_BOT')
	window.geometry('500x400')
	window.resizable(width=False, height=False)

	label = tk.Label(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Telegram id:', bg='White', fg='Black', font='TNR 14')
	label.place(x=50, y=25)

	label1 = tk.Label(text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ Telegram:', bg='White', fg='Black', font='TNR 14')
	label1.place(x=50, y=200)

	frame1 = tk.Frame(window, width=400, height=400)
	frame1.place(x=50, y=250)
	ent1 = tk.Entry(frame1, font='TNR 10', bg='white', fg='black', width=90)
	ent1.place(x=0, y=0)

	frame = tk.Frame(window, width=200, height=100)
	ent_var = tk.StringVar()
	ent = tk.Entry(frame, textvariable=ent_var, font='TNR 14', bg='white', fg='black', width=15)

	btn = tk.Button(frame1, text='–í–≤–æ–¥', font='TNR 14', bg='white', fg='black', command=lambda: enter_data(ent_var.get(), ent1.get(), window))
    
	frame.place(x=25, y=65)
	ent.place(x=25, y=0)
	btn.place(x=150, y=50)
        
	window.bind('<Return>', lambda event: enter_data(ent_var.get(), ent1.get(), window))
	window.mainloop()


def enter_data(my_id_input, bot_token_input, window):
    global my_id, bot_token
    my_id = my_id_input
    bot_token = bot_token_input
    save_my_id()  
    window.destroy()  
    initialize_bot() 


def save_my_id():
    with open(cfg_file, 'w') as f:
        json.dump({"my_id": my_id, "bot_token": bot_token}, f)  
def load_my_id():
    global my_id, bot_token
    if os.path.exists(cfg_file):
        with open(cfg_file, 'r') as f:
            config = json.load(f)
            my_id = config.get("my_id")
            bot_token = config.get("bot_token")
    else:
        id_user_tg()  

def initialize_bot():
    global bot
    bot = telebot.TeleBot(bot_token)  
load_my_id()


if my_id is None or bot_token is None:
    id_user_tg()
else:
    initialize_bot()  

load_my_id()






##–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é
menu_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=False)
btnscreen = types.KeyboardButton('üì∑–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç')
btnscreendoc = types.KeyboardButton('üñº–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç')
btnwebcam = types.KeyboardButton('üìπ–§–æ—Ç–æ –≤–µ–±–∫–∞–º–µ—Ä—ã')
btnmouse = types.KeyboardButton('üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π')
btnfiles = types.KeyboardButton('üìÇ–§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã')
btnaddit = types.KeyboardButton('‚ùáÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
btnmsgbox = types.KeyboardButton('üì©–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
btninfo = types.KeyboardButton('‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
menu_keyboard.row(btnscreen, btnscreendoc)
menu_keyboard.row(btnwebcam, btnmouse)
menu_keyboard.row(btnfiles, btnaddit)
menu_keyboard.row(btninfo, btnmsgbox)


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –§–∞–π–ª—ã –∏ –ü—Ä–æ—Ü–µ—Å—Å—ã
files_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=False)
btnstart = types.KeyboardButton('‚úîÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å')
btnkill = types.KeyboardButton('‚ùå–ó–∞–º–æ—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å')
btndown = types.KeyboardButton('‚¨áÔ∏è–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª')
btnupl = types.KeyboardButton('‚¨ÜÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
btnurldown = types.KeyboardButton('üîó–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ')
btnback = types.KeyboardButton('‚è™–ù–∞–∑–∞–¥‚è™')
files_keyboard.row(btnstart,  btnkill)
files_keyboard.row(btndown, btnupl)
files_keyboard.row(btnurldown, btnback)


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
additionals_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=False)
btnweb = types.KeyboardButton('üîó–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ')
btncmd = types.KeyboardButton('‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É')
btnoff = types.KeyboardButton('‚õîÔ∏è–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä')
btnreb = types.KeyboardButton('‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä')
btnpaste = types.KeyboardButton('üìÉ–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç')
btnprocceses = types.KeyboardButton("–ü—Ä–æ—Ü–µ—Å—Å—ã")
btninfo = types.KeyboardButton('üñ•–û –∫–æ–º–ø—å—é—Ç–µ—Ä–µ')
btnback = types.KeyboardButton('‚è™–ù–∞–∑–∞–¥‚è™')
additionals_keyboard.row(btnoff, btnreb)
additionals_keyboard.row(btncmd, btnweb)
additionals_keyboard.row(btnpaste, btnprocceses)
additionals_keyboard.row(btninfo, btnback)


#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º—ã—à—å
mouse_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
btnup = types.KeyboardButton('‚¨ÜÔ∏è')
btndown = types.KeyboardButton('‚¨áÔ∏è')
btnleft = types.KeyboardButton('‚¨ÖÔ∏è')
btnright = types.KeyboardButton('‚û°Ô∏è')
btnclick = types.KeyboardButton('üÜó')
btnback = types.KeyboardButton('‚è™–ù–∞–∑–∞–¥‚è™')
btncurs = types.KeyboardButton('–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–∞—Ö –∫—É—Ä—Å–æ—Ä–∞')
mouse_keyboard.row(btnup)
mouse_keyboard.row(btnleft, btnclick, btnright)
mouse_keyboard.row(btndown)
mouse_keyboard.row(btnback, btncurs)


info_msg = '''
*–û –∫–æ–º–∞–Ω–¥–∞—Ö*
_üì∑–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç_ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
_üñº–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç_ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ –±–µ–∑ —Å–∂–∞—Ç–∏—è
_üìπ–§–æ—Ç–æ –≤–µ–±–∫–∞–º–µ—Ä—ã_ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –≤–µ–±–∫–∞–º–µ—Ä—ã
_üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π_ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à–∫–æ–π
_üìÇ–§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã_ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
_‚ùáÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ_ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –º–µ–Ω—é —Å –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏—è–º–∏
_üì©–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è_ - –ø—Ä–∏—à–ª–µ—Ç –Ω–∞ –ü–ö –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º(msgbox)
_‚è™–ù–∞–∑–∞–¥‚è™_ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

_üîó–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ_ - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ(–≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å "http://" –∏–ª–∏ "https://" –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ, –∞ –Ω–µ IE)
_‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É_ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤ cmd –ª—é–±—É—é —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
_‚õîÔ∏è–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä_ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä
_‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä_ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä
_üñ•–û –∫–æ–º–ø—å—é—Ç–µ—Ä–µ_ - –ø–æ–∫–∞–∑—ã–≤–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, ip, –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä

_‚ùå–ó–∞–º–æ—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å_ - –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ª—é–±–æ–π –ø—Ä–æ—Ü–µ—Å—Å
_‚úîÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å_ - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Ñ–∞–π–ª—ã(–≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ exe)
_‚¨áÔ∏è–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª_ - —Å–∫–∞—á–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≤–∞—à–µ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
_‚¨ÜÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª_ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä
_üîó–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ_ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ

*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub:* [–ö–õ–ò–ö](https://github.com/Trembelling/PCToolsBot)
'''

MessageBox = ctypes.windll.user32.MessageBoxW
if os.path.exists("msg.pt"):
	pass
else:
	bot.send_message(my_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –¥–∞–Ω–Ω–æ–≥–æ –ë–æ—Ç–∞!\n–°–æ–≤–µ—Ç—É—é —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ –≤ –º–µ–Ω—é \"‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\"\n\n*–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub:* [–ö–õ–ò–ö](https://github.com/Trembelling/PCToolsBot)", parse_mode = "markdown")
	MessageBox(None, f'–ù–∞ –≤–∞—à–µ–º –ü–ö –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ PC Tools Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º\n–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑–æ–≤—ã–º', '!–í–ù–ò–ú–ê–ù–ò–ï!', 0)
	f = open('msg.pt', 'tw', encoding='utf-8')
	f.close

bot.send_message(my_id, "–ü–ö –∑–∞–ø—É—â–µ–Ω", reply_markup = menu_keyboard)


@bot.message_handler(content_types=["text"])
def get_text_messages(message):
	if str(message.from_user.id) == my_id:
		if message.text == "üì∑–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç":
			bot.send_chat_action(my_id, 'upload_photo')
			try:
				get_screenshot()
				bot.send_photo(my_id, open("screen_with_mouse.png", "rb"))
				os.remove("screen.png")
				os.remove("screen_with_mouse.png")
			except:
				bot.send_message(my_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
		
		elif message.text == "üñº–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç":
			bot.send_chat_action(my_id, 'upload_document')
			try:
				get_screenshot()
				bot.send_document(my_id, open("screen_with_mouse.png", "rb"))
				os.remove("screen.png")
				os.remove("screen_with_mouse.png")
			except:
				bot.send_message(my_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

		elif message.text == "üìπ–§–æ—Ç–æ –≤–µ–±–∫–∞–º–µ—Ä—ã":
			bot.send_chat_action(my_id, 'upload_photo')
			try:
				cap = cv2.VideoCapture(0)
				ret, frame = cap.read()
				cv2.imwrite('webcam.png', frame) 
				cap.release()
				bot.send_photo(my_id, open("webcam.png", "rb"))
				os.remove("webcam.png")
			except:
				bot.send_message(my_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
				
		elif message.text == "üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π":
			bot.send_message(my_id, "üñ±–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π", reply_markup = mouse_keyboard)
			bot.register_next_step_handler(message, mouse_process)

		elif message.text == "‚è™–ù–∞–∑–∞–¥‚è™":
			back(message)

		elif message.text == "üìÇ–§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã":
			bot.send_message(my_id, "üìÇ–§–∞–π–ª—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã", reply_markup = files_keyboard)
			bot.register_next_step_handler(message, files_process)
		
		elif message.text == "‚ùáÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ":
			bot.send_message(my_id, "‚ùáÔ∏è–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", reply_markup = additionals_keyboard)
			bot.register_next_step_handler(message, addons_process)

		elif message.text == "üì©–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
			bot.register_next_step_handler(message, messaga_process)

		elif message.text == "‚ùóÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
			bot.send_message(my_id, info_msg, parse_mode = "markdown")

		else:
			pass
	else:
		info_user(message)


def addons_process(message):
	if str(message.from_user.id) == my_id:
		bot.send_chat_action(my_id, 'typing')
		if message.text == "üîó–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É: ")
			bot.register_next_step_handler(message, web_process)

		elif message.text == "‚úÖ–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É: ")
			bot.register_next_step_handler(message, cmd_process)

		elif message.text == "‚õîÔ∏è–í—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
			bot.send_message(my_id, "–í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
			os.system('shutdown -s /t 0 /f')
			bot.register_next_step_handler(message, addons_process)
		
		elif message.text == "‚ôªÔ∏è–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä":
			bot.send_message(my_id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞...")
			os.system('shutdown -r /t 0 /f')
			bot.register_next_step_handler(message, addons_process)

		elif message.text == "üìÉ–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç: ")
			bot.register_next_step_handler(message, paste_text)

		elif message.text == "–ü—Ä–æ—Ü–µ—Å—Å—ã":
			bot.send_chat_action(my_id, 'typing')
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
			processes_names = {process.name() for process in process_iter()}
			elements_to_remove = {
                'System', 
                'System Idle Process', 
                'taskhostw.exe', 
                'svchost.exe', 
                'csrss.exe', 
                'RuntimeBroker.exe', 
                'Registry', 
                'services.exe', 
                'wininit.exe', 
                'winlogon.exe', 
                'dllhost.exe', 
                'powershell.exe', 
                'conhost.exe', 
                'explorer.exe', 
                'sihost.exe'
            }
                
                
			for element in elements_to_remove:
				processes_names.discard(element)
                
                
			sorted_processes = sorted(processes_names)
			numbered_processes = '\n'.join(f"{i + 1}. {process}" for i, process in enumerate(sorted_processes))

                
			bot.send_message(my_id, numbered_processes)
                
                
			bot.send_message(my_id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø—Ä–æ—Ü–µ—Å—Å? (–¥–∞/–Ω–µ—Ç)')
			bot.register_next_step_handler(message, confirm_kill_process)  
			bot.register_next_step_handler(message, addons_process)

		elif message.text == "üñ•–û –∫–æ–º–ø—å—é—Ç–µ—Ä–µ":
			req = requests.get('https://api.ipify.org')
			ip = req.text
			uname = os.getlogin()
			windows = platform.platform()
			processor = platform.processor()
			bot.send_message(my_id, f"*–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {uname}\n*IP:* {ip}\n*–û–°:* {windows}\n*–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:* {processor}", parse_mode = "markdown")
			bot.register_next_step_handler(message, addons_process)

		elif message.text == "‚è™–ù–∞–∑–∞–¥‚è™":
			back(message)
		else:
			pass
	else:
		info_user(message)


def files_process(message):
	if str(message.from_user.id) == my_id:
		bot.send_chat_action(my_id, 'typing')
		if message.text == "‚ùå–ó–∞–º–æ—á–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å":	
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: ")
			bot.register_next_step_handler(message, kill_process)

		elif message.text == "‚úîÔ∏è–ó–∞–ø—É—Å—Ç–∏—Ç—å":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞: ")
			bot.register_next_step_handler(message, start_process)

		elif message.text == "‚¨áÔ∏è–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞: ")
			bot.register_next_step_handler(message, downfile_process)

		elif message.text == "‚¨ÜÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
			bot.send_message(my_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª")
			bot.register_next_step_handler(message, uploadfile_process)

		elif message.text == "üîó–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ":
			bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")
			bot.register_next_step_handler(message, uploadurl_process)

		elif message.text == "‚è™–ù–∞–∑–∞–¥‚è™":
			back(message)
		else:
			pass
	else:
		info_user(message)


def mouse_process(message):
	if str(message.from_user.id) == my_id:
		if message.text == "‚¨ÜÔ∏è":
			currentMouseX,  currentMouseY  =  mouse.get_position()
			mouse.move(currentMouseX,  currentMouseY - User.curs)
			screen_process(message)

		elif message.text == "‚¨áÔ∏è":
			currentMouseX,  currentMouseY  =  mouse.get_position()
			mouse.move(currentMouseX,  currentMouseY + User.curs)
			screen_process(message)

		elif message.text == "‚¨ÖÔ∏è":
			currentMouseX,  currentMouseY  =  mouse.get_position()
			mouse.move(currentMouseX - User.curs,  currentMouseY)
			screen_process(message)

		elif message.text == "‚û°Ô∏è":
			currentMouseX,  currentMouseY  =  mouse.get_position()
			mouse.move(currentMouseX + User.curs,  currentMouseY)
			screen_process(message)

		elif message.text == "üÜó":
			mouse.click()
			screen_process(message)

		elif message.text == "–£–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–∞—Ö –∫—É—Ä—Å–æ—Ä–∞":
			bot.send_chat_action(my_id, 'typing')
			bot.send_message(my_id, f"–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–∞—Ö, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–∞–∑–º–∞—Ö {str(User.curs)}px", reply_markup = mouse_keyboard)
			bot.register_next_step_handler(message, mousecurs_settings)

		elif message.text == "‚è™–ù–∞–∑–∞–¥‚è™":
			back(message)
		else:
			pass
	else:
		info_user(message)


def back(message):
	bot.register_next_step_handler(message, get_text_messages)
	bot.send_message(my_id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup = menu_keyboard)

def info_user(message):
	bot.send_chat_action(my_id, 'typing')
	alert = f"–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: \"{message.text}\"\n\n"
	alert += f"user id: {str(message.from_user.id)}\n"
	alert += f"first name: {str(message.from_user.first_name)}\n"
	alert += f"last name: {str(message.from_user.last_name)}\n" 
	alert += f"username: @{str(message.from_user.username)}"
	bot.send_message(my_id, alert, reply_markup = menu_keyboard)

def kill_process (message):
	bot.send_chat_action(my_id, 'typing')
	try:
		os.system("taskkill /IM " + message.text + " -F")
		bot.send_message(my_id, f"–ü—Ä–æ—Ü–µ—Å—Å \"{message.text}\" —É–±–∏—Ç", reply_markup = files_keyboard)
		bot.register_next_step_handler(message, files_process)
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞! –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup = files_keyboard)
		bot.register_next_step_handler(message, files_process)

def start_process (message):
	bot.send_chat_action(my_id, 'typing')
	try:
		os.startfile(r'' + message.text)
		bot.send_message(my_id, f"–§–∞–π–ª –ø–æ –ø—É—Ç–∏ \"{message.text}\" –∑–∞–ø—É—Å—Ç–∏–ª—Å—è", reply_markup = files_keyboard)
		bot.register_next_step_handler(message, files_process)
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª", reply_markup = files_keyboard)
		bot.register_next_step_handler(message, files_process)

def web_process (message):
	bot.send_chat_action(my_id, 'typing')
	try:
		webbrowser.open(message.text, new=0)
		bot.send_message(my_id, f"–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ \"{message.text}\" –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω", reply_markup = additionals_keyboard)
		bot.register_next_step_handler(message, addons_process)
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞! —Å—Å—ã–ª–∫–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
		bot.register_next_step_handler(message, addons_process)

def cmd_process (message):
	bot.send_chat_action(my_id, 'typing')
	try:
		os.system(message.text)
		bot.send_message(my_id, f"–ö–æ–º–∞–Ω–¥–∞ \"{message.text}\" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", reply_markup = additionals_keyboard)
		bot.register_next_step_handler(message, addons_process)
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞! –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
		bot.register_next_step_handler(message, addons_process)

def paste_text(message):
    bot.send_chat_action(my_id, 'typing')
    text_to_paste = message.text.strip()
    pyperclip.copy(text_to_paste)
    pyautogui.hotkey('ctrl', 'v')  
    bot.send_message(my_id, f"–¢–µ–∫—Å—Ç \"{text_to_paste}\" –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞.")
    bot.register_next_step_handler(message, addons_process)

def confirm_kill_process(message):
    if str(message.from_user.id) == my_id:
        response = message.text.strip().lower()
        
        if response == '–¥–∞':
            bot.send_message(my_id, '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å:')
            bot.register_next_step_handler(message, kill_process_by_number)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        elif response == '–Ω–µ—Ç':
            bot.send_message(my_id, '–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
            back(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            bot.send_message(my_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".')
            bot.register_next_step_handler(message, confirm_kill_process)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å

def kill_process_by_number(message):
    if str(message.from_user.id) == my_id:
        bot.send_chat_action(my_id, 'typing')
        process_number = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        if process_number.isdigit():
            process_number = int(process_number) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (0-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è)
            processes_names = {process.name() for process in process_iter()}
            elements_to_remove = {
                'System', 
                'System Idle Process', 
                'taskhostw.exe', 
                'svchost.exe', 
                'csrss.exe', 
                'RuntimeBroker.exe', 
                'Registry', 
                'services.exe', 
                'wininit.exe', 
                'winlogon.exe', 
                'dllhost.exe', 
                'powershell.exe', 
                'conhost.exe', 
                'explorer.exe', 
                'sihost.exe'
            }
            
            # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–∑ —Å–ø–∏—Å–∫–∞
            for element in elements_to_remove:
                processes_names.discard(element)
            
            sorted_processes = sorted(processes_names)
            
            if 0 <= process_number < len(sorted_processes):
                process_to_kill = sorted_processes[process_number]
                try:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏
                    for proc in process_iter():
                        if proc.name() == process_to_kill:
                            proc.terminate()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                            bot.send_message(my_id, f"–ü—Ä–æ—Ü–µ—Å—Å '{process_to_kill}' –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
                            return
                except Exception as e:
                    bot.send_message(my_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {str(e)}")
            else:
                bot.send_message(my_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                bot.register_next_step_handler(message, kill_process_by_number)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        else:
            bot.send_message(my_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞.")
            bot.register_next_step_handler(message, kill_process_by_number)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å

def say_process(message):
	bot.send_chat_action(my_id, 'typing')
	bot.send_message(my_id, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", reply_markup = menu_keyboard)

def downfile_process(message):
	bot.send_chat_action(my_id, 'typing')
	try:
		file_path = message.text
		if os.path.exists(file_path):
			bot.send_message(my_id, "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
			bot.send_chat_action(my_id, 'upload_document')
			file_doc = open(file_path, 'rb')
			bot.send_document(my_id, file_doc)
			bot.register_next_step_handler(message, files_process)
		else:
			bot.send_message(my_id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å (–ü–†.: C:\\Documents\\File.doc)")
			bot.register_next_step_handler(message, files_process)
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞! –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å (–ü–†.: C:\\Documents\\File.doc)")
		bot.register_next_step_handler(message, files_process)

def uploadfile_process(message):
	bot.send_chat_action(my_id, 'typing')
	try:
		file_info = bot.get_file(message.document.file_id)
		downloaded_file = bot.download_file(file_info.file_path)
		src = message.document.file_name
		with open(src, 'wb') as new_file:
			new_file.write(downloaded_file)
		bot.send_message(my_id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
		bot.register_next_step_handler(message, files_process)
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç")
		bot.register_next_step_handler(message, files_process)

def uploadurl_process(message):
	bot.send_chat_action(my_id, 'typing')
	User.urldown = message.text
	bot.send_message(my_id, "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:")
	bot.register_next_step_handler(message, uploadurl_2process)	

def uploadurl_2process(message):
	bot.send_chat_action(my_id, 'typing')
	try:
		User.fin = message.text
		obj = SmartDL(User.urldown, User.fin, progress_bar=False)
		obj.start()
		bot.send_message(my_id, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ –ø—É—Ç–∏ \"{User.fin}\"")
		bot.register_next_step_handler(message, files_process)
	except:
		bot.send_message(my_id, "–£–∫–∞–∑–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –ø—É—Ç—å")
		bot.register_next_step_handler(message, addons_process)

def messaga_process(message):
	bot.send_chat_action(my_id, 'typing')
	try:
		MessageBox(None, message.text, 'PC TOOL', 0)
		bot.send_message(my_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º \"{message.text}\" –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ")
	except:
		bot.send_message(my_id, "–û—à–∏–±–∫–∞")

def mousecurs_settings(message):
	bot.send_chat_action(my_id, 'typing')
	if is_digit(message.text) == True:
		User.curs = int(message.text)
		bot.send_message(my_id, f"–†–∞–∑–º–∞—Ö –∫—É—Ä—Å–æ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {str(User.curs)}px", reply_markup = mouse_keyboard)
		bot.register_next_step_handler(message, mouse_process)
	else:
		bot.send_message(my_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: ", reply_markup = mouse_keyboard)
		bot.register_next_step_handler(message, mousecurs_settings)

def screen_process(message):
	try:
		get_screenshot()
		bot.send_photo(my_id, open("screen_with_mouse.png", "rb"))
		bot.register_next_step_handler(message, mouse_process)
		os.remove("screen.png")
		os.remove("screen_with_mouse.png")
	except:
			bot.send_chat_action(my_id, 'typing')
			bot.send_message(my_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
			bot.register_next_step_handler(message, mouse_process)
	
def get_screenshot():
	currentMouseX, currentMouseY  =  mouse.get_position()
	img = PIL.ImageGrab.grab()
	img.save("screen.png", "png")
	img = Image.open("screen.png")
	draw = ImageDraw.Draw(img)
	draw.polygon((currentMouseX, currentMouseY, currentMouseX, currentMouseY + 20, currentMouseX + 13, currentMouseY + 13), fill="white", outline="black")
	img.save("screen_with_mouse.png", "PNG")

def is_digit(string):
	if string.isdigit():
		return True
	else:
		try:
			float(string)
			return True
		except ValueError:
			return False


#while True:
#	try:
bot.polling(none_stop=True, interval=0, timeout=20)
#	except Exception as E:
#		print(E.args)
#		time.sleep(2)
